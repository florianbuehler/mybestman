//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.16.1.0 (NJsonSchema v10.7.2.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------

/* tslint:disable */
/* eslint-disable */
// ReSharper disable InconsistentNaming

import { ApiClientBase, SwaggerResponse } from 'api/utils/ApiClientExtensions'

export class ApiClient extends ApiClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(configuration: null, baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super(configuration);
        this.http = http ? http : window as any;
        this.baseUrl = this.getBaseUrl("http://localhost", baseUrl);
    }

    /**
     * Obtains all orders
     * @return successful operation
     */
    getOrders(): Promise<SwaggerResponse<OrderShortForm[]>> {
        let url_ = this.baseUrl + "/orders";
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetOrders(_response);
        });
    }

    protected processGetOrders(response: Response): Promise<SwaggerResponse<OrderShortForm[]>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(OrderShortForm.fromJS(item));
            }
            else {
                result200 = <any>null;
            }
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<OrderShortForm[]>>(new SwaggerResponse(status, _headers, null as any));
    }

    /**
     * Obtains an order by ID
     * @param orderId ID of the order to return
     * @return successful operation
     */
    getOrderByID(orderId: number): Promise<SwaggerResponse<Order>> {
        let url_ = this.baseUrl + "/orders/{orderId}";
        if (orderId === undefined || orderId === null)
            throw new Error("The parameter 'orderId' must be defined.");
        url_ = url_.replace("{orderId}", encodeURIComponent("" + orderId));
        url_ = url_.replace(/[?&]$/, "");

        let options_: RequestInit = {
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.processGetOrderByID(_response);
        });
    }

    protected processGetOrderByID(response: Response): Promise<SwaggerResponse<Order>> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = Order.fromJS(resultData200);
            return new SwaggerResponse(status, _headers, result200);
            });
        } else if (status === 400) {
            return response.text().then((_responseText) => {
            return throwException("Invalid ID supplied", status, _responseText, _headers);
            });
        } else if (status === 404) {
            return response.text().then((_responseText) => {
            return throwException("Order not found", status, _responseText, _headers);
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<SwaggerResponse<Order>>(new SwaggerResponse(status, _headers, null as any));
    }
}

export class OrderShortForm implements IOrderShortForm {
    id?: number;
    billingDate?: Date;
    firstName?: string;
    lastName?: string;
    /** Order Type */
    orderType?: OrderShortFormOrderType;
    /** Order Status */
    status?: OrderShortFormStatus;

    constructor(data?: IOrderShortForm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.billingDate = _data["billingDate"] ? new Date(_data["billingDate"].toString()) : <any>undefined;
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.orderType = _data["orderType"];
            this.status = _data["status"];
        }
    }

    static fromJS(data: any): OrderShortForm {
        data = typeof data === 'object' ? data : {};
        let result = new OrderShortForm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["billingDate"] = this.billingDate ? this.billingDate.toISOString() : <any>undefined;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["orderType"] = this.orderType;
        data["status"] = this.status;
        return data;
    }
}

export interface IOrderShortForm {
    id?: number;
    billingDate?: Date;
    firstName?: string;
    lastName?: string;
    /** Order Type */
    orderType?: OrderShortFormOrderType;
    /** Order Status */
    status?: OrderShortFormStatus;
}

export class Order implements IOrder {
    id?: number;
    billingDate?: Date;
    firstName?: string;
    lastName?: string;
    /** Order Type */
    orderType?: OrderType;
    /** Order Status */
    status?: OrderStatus;
    complete?: boolean;

    constructor(data?: IOrder) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.billingDate = _data["billingDate"] ? new Date(_data["billingDate"].toString()) : <any>undefined;
            this.firstName = _data["firstName"];
            this.lastName = _data["lastName"];
            this.orderType = _data["orderType"];
            this.status = _data["status"];
            this.complete = _data["complete"];
        }
    }

    static fromJS(data: any): Order {
        data = typeof data === 'object' ? data : {};
        let result = new Order();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["billingDate"] = this.billingDate ? this.billingDate.toISOString() : <any>undefined;
        data["firstName"] = this.firstName;
        data["lastName"] = this.lastName;
        data["orderType"] = this.orderType;
        data["status"] = this.status;
        data["complete"] = this.complete;
        return data;
    }
}

export interface IOrder {
    id?: number;
    billingDate?: Date;
    firstName?: string;
    lastName?: string;
    /** Order Type */
    orderType?: OrderType;
    /** Order Status */
    status?: OrderStatus;
    complete?: boolean;
}

export enum OrderShortFormOrderType {
    OptTest = "optTest",
    Opt1 = "opt1",
    Opt2 = "opt2",
    Opt3 = "opt3",
    Opt4 = "opt4",
}

export enum OrderShortFormStatus {
    Open = "open",
    P0Sent = "p0Sent",
    Rejected = "rejected",
    Closed = "closed",
}

export enum OrderType {
    OptTest = "optTest",
    Opt1 = "opt1",
    Opt2 = "opt2",
    Opt3 = "opt3",
    Opt4 = "opt4",
}

export enum OrderStatus {
    Open = "open",
    P0Sent = "p0Sent",
    Rejected = "rejected",
    Closed = "closed",
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    throw new ApiException(message, status, response, headers, result);
}

export class ApiException extends Error {
  public message: string;
  public status: number;
  public response: string;
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  public headers: { [key: string]: any };
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  public result: any;

  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  public constructor(message: string, status: number, response: string, headers: { [key: string]: any }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }
}

export { SwaggerResponse }